---
title: Installing Tanzu Build Service
owner: Build Service Team
---

This topic describes how to install and configure Tanzu Build Service.

## <a id='overview'></a> Overview

Build Service can be installed on any Kubernetes cluster (v1.16 or later) including PKS, GKE and AKS clusters.
The installation instructions are divided between the PKS installation, which uses OpenID Connect (OIDC) for authentication, and the install on other hosted Kubernetes clusters.

## <a id='prerequisites'></a> Prerequisites

Before you install Build Service, you must:

* Ensure your Kubernetes cluster is configured with `PersistentVolumes`. Configure the cache size per image to 2&nbsp;GB. Build Service utilizes `PersistentVolumeClaims` to cache build artifacts, which reduces the time of subsequent builds. For more information, see [Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) in the Kubernetes documentation.

* Download three k14s CLIs for your operating system. These can be found on their respective Tanzu Network pages:
  - [kapp](https://network.pivotal.io/products/kapp/)
  - [ytt](https://network.pivotal.io/products/ytt/)
  - [kbld](https://network.pivotal.io/products/kbld/)

* Download the Build Service Bundle from the [Tanzu Build Service](https://network.pivotal.io/products/build-service/) page on Tanzu Network.
  * Unarchive the Build Service Bundle file:

	```
	tar xvf build-service-<version>.tar -C /tmp
	```

* Download the kp CLI for your operating system from the [Tanzu Build Service](https://network.pivotal.io/products/build-service/) page on Tanzu Network.

* Down the Dependency Descriptor file (`descriptor-<version>.yaml`) from the latest release on the [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/) page on Tanzu Network

## <a id='other-install'></a> Installing on TKG/GKE/AKS

Create a kubernetes cluster where you would like to install build service and target the cluster as follows:

```
kubectl config use-context <CONTEXT-NAME>
```

### <a id='other-relocate-images'></a> Relocate Images to a Registry

This procedure relocates images from the Tanzu Network registry to an internal image registry.

1. Log in to the image registry where you want to store the images by running:

```
docker login <IMAGE-REGISTRY>
```

Where `IMAGE-REGISTRY` is the name of the image registry where you want to store the images.

1. Log in to the Tanzu Network registry with your Tanzu Network credentials:

```
docker login registry.network.pivotal.io
```

1. Relocate the images with the k14s tool `kbld` by running:

```
kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository <IMAGE-REPOSITORY>
```

Where `IMAGE-REPOSITORY` is the repository in your registry that you want to relocate images to.

<p class="note"><strong>Note:</strong> The flag argument <code>--lock-output /tmp/images-relocated.lock</code> creates a file that will be used for installation</code>.</p>

<p class="note"><strong>Note:</strong> When relocating to a registry that is *not* Dockerhub,
   the IMAGE-REPOSITORY must be the IMAGE-REGISTRY appended with the destination repository for the images,
   for example, <code>IMAGE-REGISTRY/build-service-imgs</code>.</p>

For example:
* Dockerhub `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository my-dockerhub-repo`
* GCR `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository gcr.io/my-project/build-service`
* Artifactory `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository artifactory.com/my-project/build-service`
* Harbor `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository harbor.io/my-project/build-service`

### <a id='other-install'></a> Install Tanzu Build Service

Use the k14s tools `kapp`, `ytt`, and `kbld` to install Build Service and define the required Build Service parameters by running:

```
ytt -f /tmp/values.yaml \
    -f /tmp/manifests/ \
	-v docker_repository="<IMAGE-REPOSITORY>" \
	-v docker_username="<REGISTRY-USERNAME>" \
	-v docker_password="<REGISTRY-PASSWORD>" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

Where:
* `IMAGE-REPOSITORY` is the image repository where Tanzu Build Service images exist.
    <p class="note"><strong>Note:</strong> This is identical to the IMAGE-REPOSITORY argument provided during kbld relocation.</p>
* `REGISTRY-USERNAME` is the username you use to access the registry. `gcr.io` expects `_json_key`
   as the username when using JSON key file authentication.
* `REGISTRY-PASSWORD` is the password you use to access the registry.
    <p class="note"><strong>Note:</strong> [Secrets in Tanzu Build Service](secrets-in-tbs.html) for more information about how the registry username and password are used in Tanzu Build Service.</p>

### <a id='other-import'></a> Import Tanzu Build Service Dependencies

The Tanzu Build Service Dependencies (Stacks, Buildpacks, Builders, etc.) are used to build applications and keep them patched.

These must be imported with the `kp` cli and the Dependency Descriptor (`descriptor-<version>.yml`) file from the [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/) page:

```
kp import -f /tmp/descriptor-<version>.yml
```
Successfully performing a `kp import` command requires that your Tanzu Network account has access to the images specified in the Dependency Descriptor. Currently, users can only access these images if they agree to the EULA for each dependency. Users must navigate to each of the dependency product pages in Tanzu Network and accept the EULA highlighted in yellow underneath the `Releases` dropdown. Here are the links to each Tanzu Network page in which users must accept the EULA:

1) [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/)
2) [Java Buildpack for VMware Tanzu](https://network.pivotal.io/products/tanzu-java-buildpack/)
3) [Node.js Buildpack for VMware Tanzu](https://network.pivotal.io/products/tanzu-nodejs-buildpack/)
4) [Go Buildpack for VMware Tanzu](https://network.pivotal.io/products/tanzu-go-buildpack/)

<p class="note"><strong>Note:</strong> `kp import` will fail if it cannot access the images in all of the above Tanzu Network pages.</p>			
		
<p class="note"><strong>Note:</strong> You must be logged in locally to the registry used for `IMAGE-REGISTRY` during relocation and the Tanzu Network registry `registry.network.pivotal.io`. This is done in the [Relocate Images to a Registry](#other-relocate-images) step.</p>

#### <a id='other-ca-cert'></a> Installing with a CA certificate for internal registry

To install Tanzu Build Service with an internal registry that requires providing a CA cert such as Harbor, use the normal
installation command with the CA certificate file passed in with a `-f` flag:

```
ytt -f /tmp/values.yaml \
	-f /tmp/manifests/ \
	-f <PATH-TO-CA> \
	-v docker_repository="<IMAGE-REPOSITORY>" \
	-v docker_username="<REGISTRY-USERNAME>" \
	-v docker_password="<REGISTRY-PASSWORD>" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

Where:
* `PATH-TO-CA` is the path to the registry root CA. This CA is required to enable Build Service to interact with internally deployed registries. This is the CA that was used while deploying the registry.
* `IMAGE-REPOSITORY` is the image repository where Tanzu Build Service images exist.
    <p class="note"><strong>Note:</strong> This is identical to the IMAGE-REPOSITORY argument provided during kbld relocation.</p>
* `REGISTRY-USERNAME` is the username you use to access the registry. `gcr.io` expects `_json_key`
   as the username when using JSON key file authentication.
* `REGISTRY-PASSWORD` is the password you use to access the registry.
    <p class="note"><strong>Note:</strong> [Secrets in Tanzu Build Service](secrets-in-tbs.html) for more information about how the registry username and password are used in Tanzu Build Service.</p>

#### <a id='other-additional-config'></a> Additional Configuration

Other optional parameters – such as proxy configuration – can be added using the `-v` flag:

* `admin_users` is a comma separated list of users who will be granted admin privileges on Build Service.
* `admin_groups`: a comma separated list of groups that will be granted admin privileges on Build Service.
* `http_proxy`: The HTTP proxy to use for network traffic.
* `https_proxy`: The HTTPS proxy to use for network traffic.
* `no_proxy`: A comma-separated list of hostnames that should not use a proxy.

## <a id='pks-install'></a> Installing on PKS

* Install PKS v1.6 or later. For more information, see [Installing Enterprise PKS](https://docs.pivotal.io/pks/1-6/installing.html) in the PKS documentation.

* To install Build Service, you must configure a User Account and Authentication (UAA) client credentials.

* <strong>Optional:</strong> configure your PKS tile with `oidc` as described [here](#pks-as-oidc-provider).

### <a id='retrieve-credentials'></a> Retrieve PKS Cluster Credentials

This procedure retrieves the credentials that authenticate communication between `kubectl`
and the PKS cluster where Build Service runs.

To retrieve the PKS cluster credentials:

1. Log in to PKS and get the latest kubeconfig by running:

```
pks get-kubeconfig CLUSTER-NAME -a API-URI -u USERNAME -p PASSWORD --ca-cert PATH-TO-CERTIFICATE
```

Where:
* `API-URI` is the PKS API server URI.
* `USERNAME` is name of your cluster admin.
* `PASSWORD` is the cluster admin password.
* `PATH-TO-CERTIFICATE` is the path to your root CA certificate.
* `CLUSTER-NAME` is the name of the PKS cluster where Build Service runs.

This command sets the context to the `CLUSTER-NAME` provided.

For example:

```
pks get-kubeconfig build-cluster -a api.pks.example.com -u alana -p P4ssW0rd --ca-cert /var/tempest/workspaces/default/root_ca_certificate
```

### <a id='pks-relocate-images'></a> Relocate Images to a Registry

This procedure relocates images from the Tanzu Network registry to an internal image registry.

1. Log in to the image registry where you want to store the images by running:

```
docker login <IMAGE-REGISTRY>
```

Where `IMAGE-REGISTRY` is the name of the image registry where you want to store the images.

1. Log in to the Tanzu Network registry with your Tanzu Network credentials:

```
docker login registry.network.pivotal.io
```

1. Relocate the images with the k14s tool `kbld` by running:

```
kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository <IMAGE-REPOSITORY>
```

Where `IMAGE-REPOSITORY` is the repository in your registry that you want to relocate images to.

<p class="note"><strong>Note:</strong> The flag argument <code>--lock-output /tmp/images-relocated.lock</code> creates a file that will be used for installation</code>.</p>

<p class="note"><strong>Note:</strong> When relocating to a registry that is *not* Dockerhub,
   the IMAGE-REPOSITORY must be the IMAGE-REGISTRY appended with the destination repository for the images,
   for example, <code>IMAGE-REGISTRY/build-service-imgs</code>.</p>

For example:
* Dockerhub `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository my-dockerhub-repo`
* GCR `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository gcr.io/my-project/build-service`
* Artifactory `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository artifactory.com/my-project/build-service`
* Harbor `kbld relocate -f /tmp/images.lock --lock-output /tmp/images-relocated.lock --repository harbor.io/my-project/build-service`

### <a id='pks-install'></a> Install Tanzu Build Service

Use the k14s tools `kapp`, `ytt`, and `kbld` to install Build Service and define the required Build Service parameters by running:

```
ytt -f /tmp/values.yaml \
	-f /tmp/manifests/ \
	-v docker_repository="<IMAGE-REPOSITORY>" \
	-v docker_username="<REGISTRY-USERNAME>" \
	-v docker_password="<REGISTRY-PASSWORD>" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

Where:
* `IMAGE-REPOSITORY` is the image repository where Tanzu Build Service images exist.
    <p class="note"><strong>Note:</strong> This is identical to the IMAGE-REPOSITORY argument provided during kbld relocation.</p>
* `REGISTRY-USERNAME` is the username you use to access the registry. `gcr.io` expects `_json_key`
   as the username when using JSON key file authentication.
* `REGISTRY-PASSWORD` is the password you use to access the registry.
    <p class="note"><strong>Note:</strong> [Secrets in Tanzu Build Service](secrets-in-tbs.html) for more information about how the registry username and password are used in Tanzu Build Service.</p>

### <a id='pks-import'></a> Import Tanzu Build Service Dependencies

The Tanzu Build Service Dependencies (Stacks, Buildpacks, Builders, etc.) are used to build applications and keep them patched.

These must be imported with the `kp` cli and the Dependency Descriptor (`descriptor-<version>.yml`) file from the [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/) page:

```
kp import -f /tmp/descriptor-<version>.yml
```

Successfully performing a `kp import` command requires that your Tanzu Network account has access to the images specified in the Dependency Descriptor. Currently, users can only access these images if they agree to the EULA for each dependency. Users must navigate to each of the dependency product pages in Tanzu Network and accept the EULA highlighted in yellow underneath the `Releases` dropdown. Here are the links to each Tanzu Network page in which users must accept the EULA:

1) [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/)
2) [Java Buildpack for VMware Tanzu](https://network.pivotal.io/products/tanzu-java-buildpack/)
3) [Node.js Buildpack for VMware Tanzu](https://network.pivotal.io/products/tanzu-nodejs-buildpack/)
4) [Go Buildpack for VMware Tanzu](https://network.pivotal.io/products/tanzu-go-buildpack/)

<p class="note"><strong>Note:</strong> `kp import` will fail if it cannot access the images in all of the above Tanzu Network pages</p>		
		
<p class="note"><strong>Note:</strong> You must be logged in locally to the registry used for `IMAGE-REGISTRY` during relocation and the Tanzu Network registry `registry.network.pivotal.io`. This is done in the [Relocate Images to a Registry](#pks-relocate-images) step.</p>

#### <a id='pks-ca-cert'></a> Installing with a CA certificate for internal registry

To install Tanzu Build Service with an internal registry that requires providing a CA cert such as Harbor, use the normal
installation command with the CA certificate file passed in with a `-f` flag:

```
ytt -f /tmp/values.yaml \
	-f /tmp/manifests/ \
	-f <PATH-TO-CA> \
	-v docker_repository="<IMAGE-REPOSITORY>" \
	-v docker_username="<REGISTRY-USERNAME>" \
	-v docker_password="<REGISTRY-PASSWORD>" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

Where:
* `PATH-TO-CA` is the path to the registry root CA. This CA is required to enable Build Service to interact with internally deployed registries. This is the CA that was used while deploying the registry.
* `IMAGE-REPOSITORY` is the image repository where Tanzu Build Service images exist.
    <p class="note"><strong>Note:</strong> This is identical to the IMAGE-REPOSITORY argument provided during kbld relocation.</p>
* `REGISTRY-USERNAME` is the username you use to access the registry. `gcr.io` expects `_json_key`
   as the username when using JSON key file authentication.
* `REGISTRY-PASSWORD` is the password you use to access the registry.
    <p class="note"><strong>Note:</strong> [Secrets in Tanzu Build Service](secrets-in-tbs.html) for more information about how the registry username and password are used in Tanzu Build Service.</p>

#### <a id='pks-additional-config'></a> Additional Configuration

Other optional parameters – such as proxy configuration – can be added using the `-v` flag:

* `admin_users` is a comma separated list of users who will be granted admin privileges on Build Service.
* `admin_groups`: a comma separated list of groups that will be granted admin privileges on Build Service.
* `http_proxy`: The HTTP proxy to use for network traffic.
* `https_proxy`: The HTTPS proxy to use for network traffic.
* `no_proxy`: A comma-separated list of hostnames that should not use a proxy.

### <a id='pks-as-oidc-provider'></a> Configuring PKS as an OIDC Provider

The authentication and authorization processes for Build Service use a combination of RBAC rules and
third-party authentication, including OpenID Connect (OIDC).
You may configure UAA as an OIDC provider for your PKS deployment to provide authentication for Build Service.

To configure UAA as an OIDC provider for your PKS deployment:

1. Navigate to the OpsManager Installation Dashboard.

1. Click the PKS tile.

1. Select **UAA**.

1. Under **Configure created clusters to use UAA as the OIDC provider**, select **Enable**.

1. Ensure the values in the **UAA OIDC Groups Prefix** and **UAA OIDC Username Prefix** fields are the same and record them.
   For example, `"oidc:"`. You will need these values during the installation of Build Service.
      <p class="note"><strong>Note:</strong> Ensure you add a <code>:</code> at the end of the desired prefix.</p>

1. Click **Save**.

1. In the OpsManager Installation Dashboard, click **Review Pending Changes**, then **Apply Changes**.

## <a id='offline-installation'></a> Installation to Air-Gapped Environment

Tanzu Build Service can be installed to a Kubernetes Cluster and registry that are air-gapped from external traffic.

### <a id='offline-relocate-images'></a> Relocate Images to a Registry (Air-Gapped)

This procedure relocates images from the Tanzu Network registry to an internal image registry via a local machine.

The local machine must have write access to the internal registry.

1. Log in to the image registry where you want to store the images by running:

```
docker login <IMAGE-REGISTRY>
```

Where `IMAGE-REGISTRY` is the name of the image registry where you want to store the images.

1. Log in to the Tanzu Network registry with your Tanzu Network credentials:

```
docker login registry.network.pivotal.io
```

1. Package the images in a file on your local machine with the k14s tool `kbld` by running:

```
kbld package -f /tmp/images.lock --output /tmp/packaged-images.tar
```

1. Move the output file `packaged-images.tar` to a machine that has access to the air-gapped environment.

1. Unpackage the images from your local machine to the internal registry:

```
kbld unpackage -f /tmp/dev-images.lock \
  --input /tmp/packaged-images.tar \
  --repository <IMAGE-REPOSITORY> \
  --lock-output /tmp/images-relocated.lock
```

Where `IMAGE-REPOSITORY` is the repository in your registry that you want to relocate images to.

<p class="note"><strong>Note:</strong> The flag argument `--lock-output /tmp/images-relocated.lock`
 creates a file that will be used for installation</code>.</p>

<p class="note"><strong>Note:</strong> When unpackaging to a registry that is *not* Dockerhub,
   the IMAGE-REPOSITORY must be the IMAGE-REGISTRY appended with the destination folder for the images,
   for example, <code>IMAGE-REGISTRY/build-service-imgs</code>.</p>

For example:
* Dockerhub `kbld unpackage -f /tmp/images.lock --input /tmp/packaged-images.tar --lock-output /tmp/images-relocated.lock --repository my-dockerhub-repo`
* GCR `kbld unpackage -f /tmp/images.lock --input /tmp/packaged-images.tar --lock-output /tmp/images-relocated.lock --repository gcr.io/my-project/build-service`
* Artifactory `kbld unpackage -f /tmp/images.lock --input /tmp/packaged-images.tar --lock-output /tmp/images-relocated.lock --repository artifactory.com/my-project/build-service`
* Harbor `kbld unpackage -f /tmp/images.lock --input /tmp/packaged-images.tar --lock-output /tmp/images-relocated.lock --repository harbor.io/my-project/build-service`

### <a id='offline-install'></a> Install Tanzu Build Service (Air-Gapped)

Use the k14s tools `kapp`, `ytt`, and `kbld` to install Build Service and define the required Build Service parameters by running:

```
ytt -f /tmp/values.yaml \
	-f /tmp/manifests/ \
	-v docker_repository="<IMAGE-REPOSITORY>" \
	-v docker_username="<REGISTRY-USERNAME>" \
	-v docker_password="<REGISTRY-PASSWORD>" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

Where:
* `IMAGE-REPOSITORY` is the image repository where stack images and store buildpackages will be relocated.
    <p class="note"><strong>Note:</strong> This is identical to the IMAGE-REPOSITORY argument provided during kbld relocation.</p>
* `REGISTRY-USERNAME` is the username you use to access the registry. `gcr.io` expects `_json_key`
   as the username when using JSON key file authentication.
* `REGISTRY-PASSWORD` is the password you use to access the registry.
    <p class="note"><strong>Note:</strong> [Secrets in Tanzu Build Service](secrets-in-tbs.html) for more information about how the registry username and password are used in Tanzu Build Service.</p>

### <a id='offline-import'></a> Import Tanzu Build Service Dependencies (Air-Gapped)

The Tanzu Build Service Dependencies (Stacks, Buildpacks, Builders, etc.) are used to build applications and keep them patched.

These must be imported with the `kp` cli and the Dependency Descriptor (`descriptor-<version>.yml`) file from the [Tanzu Build Service Dependencies](https://network.pivotal.io/products/tbs-dependencies/) page.

#### <a id='offline-import-relocate'></a> Relocate Tanzu Build Service Dependency Images (Air-Gapped)

To import these dependencies into an air-gapped environment, they must first be relocated to the internal registry. Use `kbld` to perform this relocation similarly to installation:

1. Download the dependency images locally:

```
kbld package -f descriptor-<version>.yml \
  --output /tmp/packaged-dependencies.tar
```

<p class="note"><strong>Note:</strong> You must be logged in locally to the Tanzu Network registry. This is done in the [Relocate Images to a Registry](#offline-relocate-images) step.</p>

1. Move the output file `packaged-dependencies.tar` to a machine that has access to the air-gapped environment.

1. Upload the dependency images to the Tanzu Build Service registry:

```
kbld unpackage -f descriptor-<version>.yml \
  --input /tmp/packaged-dependencies.tar \
  --repository <IMAGE-REPOSITORY> \
  --lock-output /tmp/dependencies-relocated.lock
```

Where:
* `IMAGE-REPOSITORY` is the internal image repository where dependency images will be relocated.

<p class="note"><strong>Note:</strong> You must be logged in locally to the registry used for `IMAGE-REGISTRY`. This is done in the [Relocate Images to a Registry](#offline-relocate-images) step.</p>

#### <a id='offline-import-import'></a> Import Tanzu Build Service Dependency Resources (Air-Gapped)

After the dependency images are uploaded to the internal registry, you can successfully import these images and create the corresponding Tanzu Build Service resources.

Use the following command with `kbld` and the `kp` CLI:

```
kbld -f descriptor-<version>.yml -f /tmp/dependencies-relocated.lock | kp import -f -
```

### <a id='offline-ca-cert'></a> Installing with a CA certificate for internal registry (Air-Gapped)

When installing to an air-gapped environment, you may need to configure a CA certificate to use the internal registry.

#### <a id='offline-ca-cert-relocation'></a> Relocating with a CA certificate (Air-Gapped)

You can pass a CA certificate file to `kbld` when unpackaging the local packages file:

```
kbld unpackage -f descriptor-<version>.yml \
	--input /tmp/packaged-dependencies.tar \
	--repository <IMAGE-REPOSITORY> \
	--lock-output /tmp/dependencies-relocated.lock \
	--registry-ca-cert-path <PATH-TO-CA>
```

#### <a id='offline-ca-cert-install'></a> Installing with a CA certificate (Air-Gapped)

To install Tanzu Build Service with an internal registry that requires providing a CA cert such as Harbor, use the normal
installation command with the CA certificate file passed in with a `-f` flag:

```
ytt -f /tmp/values.yaml \
	-f /tmp/manifests/ \
	-f <PATH-TO-CA> \
	-v docker_repository="<IMAGE-REPOSITORY>" \
	-v docker_username="<REGISTRY-USERNAME>" \
	-v docker_password="<REGISTRY-PASSWORD>" \
	| kbld -f /tmp/images-relocated.lock -f- \
	| kapp deploy -a tanzu-build-service -f- -y
```

#### <a id='offline-additional-config'></a> Additional Configuration

Other optional parameters – such as proxy configuration – can be added using the `-v` flag:

* `admin_users` is a comma separated list of users who will be granted admin privileges on Build Service.
* `admin_groups`: a comma separated list of groups that will be granted admin privileges on Build Service.
* `http_proxy`: The HTTP proxy to use for network traffic.
* `https_proxy`: The HTTPS proxy to use for network traffic.
* `no_proxy`: A comma-separated list of hostnames that should not use a proxy.

## <a id='verify-installation'></a> Verify Installation

Verify your Build Service installation by first targeting the cluster Build Service has been installed on.

To verify your Build Service installation:

1. Download the `kp` binary from the [Tanzu Build Service](https://network.pivotal.io/products/build-service/) page on Tanzu Network.

1. List the cluster builders available in your installation:

```
kp clusterbuilder list
```

You should see an output that looks as follows:

```
NAME       READY    STACK                          IMAGE
base       true     io.buildpacks.stacks.bionic    <image@sha256:digest>
default    true     io.buildpacks.stacks.bionic    <image@sha256:digest>
full       true     io.buildpacks.stacks.bionic    <image@sha256:digest>
tiny       true     io.paketo.stacks.tiny          <image@sha256:digest>
```

## <a id='update-deps'></a> Updating Build Service Dependencies

Use the following documentation to keep applications patched and up-to-date with Tanzu Build Service:

To keep dependencies up-to-date, see [Updating Build Service Dependencies](updating-deps.html)

To manage Stacks, see [Managing Stacks](managing-stacks.html)

To manage Buildpack Stores, see [Managing Stores](managing-stores.html)

## <a id='access-to-cluster-builders'></a> Ensuring Access to Cluster Builders

In order to use Cluster Builders, such as the ones installed with Tanzu Build Service, we suggest to install Tanzu Build Service to a repository that is accessible by the nodes in the kubernetes cluster without credentials.

If this is not desired, see [Using Synced Secrets to access Cluster Builders](secrets-in-tbs.html#sync-secrets).

## <a id='ensure-readable-run-image'></a> Ensuring the Run Image is Readable

Build Service relies on the run-image being publicly readable or readable with the registry credentials configured in a project/namespace for the builds to be executed successfully.

The location of the run image can be identified by running the following command:

```
kp clusterstack status <stack-name>
```

If the cluster stack run image is not public, you may need to create a registry secret in any namespace where Images or Builds will be used. For more details on secrets in Tanzu Build Service, see [Managing Secrets](managing-secrets.html)

This can be done with the `kp` CLI:

```
kp secret create my-registry-creds --registry example-registry.io --registry-user my-registry-user --namepsace build-namespace
```
