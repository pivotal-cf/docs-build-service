---
title: Manage ClusterStacks with your Tanzu Build Service
owner: Build Service Team
---

This topic tells you how to manage ClusterStacks with your Tanzu Build Service (commonly known as TBS).

A ClusterStack is a cluster scoped resource that provides the build and run images for the
[Cloud Native Buildpack stack](https://buildpacks.io/docs/concepts/components/stack/) that will be used in a [Builder](managing-builders.html).

Tanzu Build Service includes stacks for [Ubuntu Bionic](https://releases.ubuntu.com/18.04/) and [Ubuntu Jammy](https://releases.ubuntu.com/22.04/) distributions.

<p class="note">
  <strong>Note:</strong> Ubuntu Bionic will no longer receive support starting in April 2023.
  Migrate to Jammy stacks as soon as possible before this date.
</p>

Stacks are installed automatically during installation by automatic dependency updates or installed manually using the `kp` CLI.
These ClusterStacks are referenced in corresponding ClusterBuilder resources.

For more information about security and patching cadence for these stacks and their ideal use cases, see
[Stacks](https://docs.vmware.com/en/VMware-Tanzu-Buildpacks/services/tanzu-buildpacks/GUID-stacks.html). You can access more detailed release notes for the stacks by following these links:

| Name | ID |
|---|---|
| [tiny](https://github.com/paketo-buildpacks/bionic-tiny-stack/releases)| io.paketo.stacks.tiny |
| [base](https://github.com/paketo-buildpacks/bionic-base-stack/releases)| io.buildpacks.stacks.bionic |
| [full](https://github.com/paketo-buildpacks/bionic-full-stack/releases)| io.buildpacks.stacks.bionic |
| [tiny-jammy](https://github.com/paketo-buildpacks/jammy-tiny-stack/releases)| io.buildpacks.stacks.jammy.tiny |
| [base-jammy](https://github.com/paketo-buildpacks/jammy-base-stack/releases)| io.buildpacks.stacks.jammy |
| [full-jammy](https://github.com/paketo-buildpacks/jammy-full-stack/releases)| io.buildpacks.stacks.jammy |

The `kp` CLI can be used to manage clusterstack. See the kpack-cli [help text](https://github.com/vmware-tanzu/kpack-cli/blob/v0.2.0/docs/kp.md).

```
$ kp clusterstack
Cluster Stack Commands

Usage:
  kp clusterstack [command]

Aliases:
  clusterstack, csk

Available Commands:
  create      Create a cluster stack
  delete      Delete a cluster stack
  list        List cluster stacks
  save        Create or update a cluster stack
  status      Display cluster stack status
  update      Update a cluster stack

Flags:
  -h, --help   help for clusterstack

Use "kp clusterstack [command] --help" for more information about a command.
```

<p class='note'>
  <strong>Note:</strong> These docs assume you are using kp CLI v0.9.x with Tanzu Build Service v1.9.x.
  If a feature is not working, you might need to upgrade your CLI.
</p>

<p class='note'><strong>Note:</strong> Only Build Service Admins (that is, users with the <code>pb-admin-role</code> kubernetes ClusterRole) can perform clusterstack commands.</p>

## <a id='create-stack'></a> Create a ClusterStack

Users can create a clusterstack by using build and run images from a Docker registry or the local machine.
The run and build images provided during clusterstack creation are uploaded to the `kp_default_repository`, which is the `docker-repository` specified during Tanzu Build Service install.


- If you use a Docker registry for the stack images:

    ```
    kp clusterstack create <clusterstack-name> \
     --build-image <location of build-image> \
     --run-image <location of run-image>
    ```

    <p class='note'><strong>Note:</strong> The user must have read access to the source Docker registry and write access to the kp default registry on the local machine.</p>

    For example:

    ```
    kp csk create my-clusterstack \
     -b gcr.io/test/stack/run:latest
     -r gcr.io/test/stack/build:latest
    ```

* If you use local stack images created with `docker save`:

    ```
    kp clusterstack create <clusterstack-name> \
     --build-image <path to build-image>.tar \
     --run-image <path to run-image>.tar
    ```

    <p class='note'><strong>Note:</strong> The user must have write access to the kp default registry on the local machine.</p>

    For example:

    ```
    kp csk create my-clusterstack \
      -b ./local-build-image.tar \
      -r ./local-run-image.tar
    ```

## <a id='update-stack'></a> Update a ClusterStack

Users can update a stack by using build and run images from a Docker registry or the local machine.
The run and build images provided during clusterstack update are uploaded to the `kp-default-repository`, which is the `kp_default_repository` specified during Tanzu Build Service install.

- If using a Docker registry:

    ```
    kp clusterstack update <stack-name> \
     --build-image <location of build-image> \
     --run-image <location of run-image>
    ```

    <p class='note'><strong>Note:</strong> The user must have read access to the source Docker registry and write access to the kp default registry on the local machine.</p>

    For example:

    ```
    kp csk update my-clusterstack \
     -b gcr.io/test/stack/run:latest
     -r gcr.io/test/stack/build:latest
    ```

* If using local stack images created with `docker save`:

    ```
    kp clusterstack update <stack-name> \
     --build-image <path to build-image>.tar \
     --run-image <path to run-image>.tar
    ```

    <p class='note'><strong>Note:</strong> The user must have write access to the kp default registry on the local machine.</p>

    For example:

    ```
    kp csk update my-clusterstack \
      -b ./local-build-image.tar \
      -r ./local-run-image.tar
    ```

## <a id='save-stacks'></a> Save a ClusterStack

Users can create or update a ClusterStack by using the `save` command. The `kp clusterstack save` command is used exactly the same as `kp clusterstack create` and `kp clusterstack update`, but it determines whether a clusterstack needs to be created or updated.

## <a id='get-stack-status'></a> Get ClusterStack status

Users can get the current status of a clusterstack by running:

```
kp clusterstack status <stack-name>
```

The following is an example of the output for this command:

```
Status:          Ready
ID:             org.cloudfoundry.stacks.cflinuxfs3
Run Image:      paketo/run:full-cnb
Build Image:    paketo/build:full-cnb
```

## <a id='delete-stacks'></a> Delete a ClusterStack

Users can delete an existing clusterstack by running:

```
kp clusterstack delete <stack-name>
```

<p class='note'><strong>Note:</strong> The user is not asked for a confirmation before deletion.</p>

## <a id='list-stacks'></a> List all ClusterStacks

Users can view the list of all ClusterStacks created:

The following is an example of the output for this command:

```
NAME             READY    ID
base             True     io.buildpacks.stacks.bionic
default          True     io.buildpacks.stacks.bionic
full             True     io.buildpacks.stacks.bionic
tiny             True     io.paketo.stacks.tiny
base-jammy       True     io.buildpacks.stacks.bionic
full-jammy       True     io.buildpacks.stacks.bionic
tiny-jammy       True     io.buildpacks.stacks.jammy.tiny
```

## <a id='image-update-stack-updates-only'></a> How to update an image for Stack updates only?

To achieve Stack only updates for an Image, you can [pin the Buildpack versions](managing-builders.html#pin-buildpack-version) in the Builder used for creating the image.
