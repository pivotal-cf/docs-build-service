---
title: Update your Tanzu Build Service dependencies
owner: Build Service Team
---

This topic tells you how to update your Tanzu Build Service (commonly known as TBS) dependencies.

Keeping applications up-to-date with the latest dependency patches is a core feature of Tanzu Build Service. Updates to dependencies will be propagated to application images. The resources that account for these patches are:

- **ClusterStacks** - Update a ClusterStack to patch operating system packages.

You can use the `kp` CLI to update any resource. See the kpack-cli [help text](https://github.com/vmware-tanzu/kpack-cli/blob/v0.4.0/docs/kp.md) on GitHub.

<p class='note'>
  <strong>Note:</strong> These docs assume you are using kp CLI v0.11.x with Tanzu Build Service v1.13.x.
  If a feature is not working, you might need to upgrade your CLI.
</p>

## <a id='online-update'></a> Updating dependencies

### <a id='dependency-updater'></a> Automatically update dependencies

## Enable Automatic Dependency Updates

TBS dependencies can be configured to be automatically updated. Within a version line, only patch versions are incremented to avoid any possible breaking changes. Users can customize the packages that can be updated through tbs-values or their full deps values.

1. Add the following to tbs-values.yaml:

    ```yaml
      dependency_updates:
      allow: true
      scope: <SCOPE>
      include_packages: [""]
      exclude_packages: [""]
    ```
    Where:
    - `SCOPE` is the list of dependencies you would like to be updated.
        The options are:
        - `stacks-only` (default value): only stacks and builders are updated
        - `all`: stacks, builders, and buildpacks are updated
        - `custom`: this list is empty by default, use the `include_packages` key to add packages to be updated

<p class="note"><strong>Note:</strong> The TBS package install and/or the Full Deps Package install will need to be updated after changing tbs-values</p>

2. Create a secret for VMware Tanzu Network using the `tanzu` cli:

    ```commandline
     tanzu secret registry add tanzunet-creds \
     --server "registry.tanzu.vmware.com" \
     --username "${TANZUNET_REGISTRY_USERNAME}" \
     --password "${TANZUNET_REGISTRY_PASSWORD}" \
     --namespace ${INSTALL_NAMESPACE}
   ```
3. Add the Tanzu Build Service Dependency Updates package repository by running:

   ```
   kubectl apply -f - <<EOF
     apiVersion: packaging.carvel.dev/v1alpha1
     kind: PackageRepository
     metadata:
       name: tbs-dependencies-package-repository
       namespace: tap-install
     spec:
       fetch:
         imgpkgBundle:
           image: registry.tanzu.vmware.com/build-service-dependency-updater/package-repo
           tagSelection:
             semver:
             # this should be TAP major.minor.x
               constraints: "1.8.x"
   EOF
   ```

For more information on adding new buildpack versions or updating buildpacks out of band, see the [Creating Custom Cluster Buildpacks](creating-custom-clusterbuildpack.html) page.

### <a id='online-stack-update'></a> Cluster stacks update

Cluster stacks are now managed by kapp controller. You need to create new resources and reference them in your builder if you want to change them. More info on managing stacks can be found on the [Managing Stacks](managing-stacks.html) page.

### <a id='online-store-update'></a> Cluster store update

We now use Cluster buildpacks instead of Cluster stores. You can still use Cluster stores but Cluster buildpacks are recommended. More info on creating Cluster Buildpacks can be found on the [Creating Custom Cluster Buildpacks](creating-custom-clusterbuildpack.html) page.

## <a id='offline-update'></a> Offline update of dependencies

## Enable Automatic Dependency Updates - airgapped

TBS dependencies can also be configured to be automatically updated in an airgapped environment.

1. Add the following to tbs-values.yaml:

    ```yaml
      dependency_updates:
      allow: true
      scope: <SCOPE>
      include_packages: [""]
      exclude_packages: [""]
    ```
    Where:
    - `SCOPE` is the list of dependencies you would like to be updated.
        The options are:
        - `stacks-only` (default value): only stacks and builders are updated
        - `all`: stacks, builders, and buildpacks are updated
        - `custom`: this list is empty by default, use the `include_packages` key to add packages to be updated

<p class="note"><strong>Note:</strong> The TBS package install and/or the Full Deps Package install will need to be updated after changing tbs-values</p>

2. Login to registry.tanzu.vmware.com and the internal repo on a machine that has internal repo access (assumes the cluster has a secret for the internal repo)
3. Relocate the deps updater package repo with imgpkg to the internal repo
4. Add the Tanzu Build Service Dependency Updates package repository by running:
<p class="note"><strong>Note:</strong> The automatic dependency updater follows a different version than TBS. It uses the TAP version to align with our recommended install method. TBS 1.13 corresponds to dependency version `1.8.x`</p>

   ```
   kubectl apply -f - <<EOF
     apiVersion: packaging.carvel.dev/v1alpha1
     kind: PackageRepository
     metadata:
       name: tbs-dependencies-package-repository
       namespace: tap-install
     spec:
       fetch:
         imgpkgBundle:
           image: <internal repo ref>
           tagSelection:
             semver:
             # this should be TAP major.minor.x
               constraints: "1.8.x"
   EOF
   ```
5. Set up a job to watch `registry.tanzu.vmware.com/build-service-dependency-updater/package-repo` for changes and then relocate to the internal repo using: 

```console
    imgpkg copy -b build-service-dependency-updater/package-repo:<LATEST-VERSION-FOR-TBS-MINOR> --to-repo=${INTERNAL_REPOSITORY}
    ```  

The cluster will be watching the internal repo. This step is optional, but updates won't be completely automatic without it.