---
title: Manage Custom Stacks with your Tanzu Build Service
owner: Build Service Team
---

This topic tells you how to manage Custom Stacks with your Tanzu Build Service.

A CustomStack is a resource that allows users to create a customized [ClusterStack](managing-stacks.html) from Ubuntu 22.04 (Jammy Jellyfish) and UBI7/UBI8 non-minimal-based OCI images.

<p class='note'><strong>Note:</strong> CustomStacks created with UBI7/UBI8 images do not currently support adding packages, mixins, or caCerts.  Currently, only the Java Tanzu Buildpacks support CustomStacks that use UBI images. </p>
<p class='note'><strong>Note:</strong> Private registries which require a custom CA certificate are not currently supported as publishing destinations for CustomStack images.</p>

CustomStacks can be used to:

* Convert a pre-existing base image that you'd like to use with Tanzu Build Service into a ClusterStack resource.
* Add required stack metadata to base images.
* Add CA certificates to build and/or run image.
* Add packages and [mixin labels](https://buildpacks.io/docs/concepts/components/stack/#mixins) to build and/or run image.
* Set CNB user and group IDs.

## <a id='creating-a-customstack'></a> Creating a CustomStack

<p class='note'><strong>Note:</strong> CustomStacks make changes to a base image that require root permissions such as adding OS packages, setting the user or group id, or adding CA certificates to the OS trusted store. This means that CustomStack pods must run as privileged. However, TBS does NOT require any privileged containers to install or run â€“ only when using CustomStacks is a privileged container ever created.</p>

A CustomStack is created by running `kubectl apply` with a resource configuration file. The following defines the relevant fields of the CustomStack resource spec in more detail:

* `source`: The location of base images used for building the stack. See more info in [Source Configuration](#source-config).
* `destination`: The location to publish built images and optional ClusterStack. See more info in [Destination Configuration](#destination-config).
* `caCerts`: References to config maps of CA certificates to add to one or both of the stack images.
* `packages`: List of packages to install on one or both of the stack images. A list of all available packages can be found in [Software Packages in "jammy"](https://packages.ubuntu.com/jammy/allpackages) on the ubuntu packages web page.
* `mixins`: List of mixin labels to add to one or both of the stack images. Information on the mixins concept can be found in [Stack](https://buildpacks.io/docs/concepts/components/stack/#mixins) on the Buildpacks.io website.
* `service-account-name`: Name of service account with secret containing credentials to push to registry.
* `user`: User and group ID of the CNB user.
  * Not required if the user is already present in metadata.
  * If the user and/or group ID do not exist on the image, they are created.

### <a id='source-config'></a> Source configuration

The `source` field describes the base images for the CustomStack. It can be configured in exactly one of the following ways:

* Registry Images

  ```yaml
  source:
    registryImages:
      build:
        image: <build-base-image>
      run:
        image: <run-base-image>
  ```

  * `build-base-image`: The fully qualified reference of the build base image.
  * `run-base-image`: The fully qualified reference of the run base image.

* Stack

  ```yaml
  stack:
    name: <cluster-stack-name>
    kind: ClusterStack
  ```

  * `cluster-stack-name`: Name of ClusterStack to base CustomStack images on.

### <a id='destination-config'></a> Destination Configuration

The `destination` field describes where the built images are published and whether a ClusterStack should be created.

```yaml
destination:
  build:
    tag: <output-build-image-tag>
  run:
    tag: <output-run-image-tag>
  stack: # Optional
    name: <output-cluster-stack-name>
    kind: ClusterStack
```

* `output-build-image-tag`: The registry location where the build image is created.
* `output-run-image-tag`: The registry location where the run image is created.
* `output-cluster-stack-name`: Name of ClusterStack to create with CustomStack images.

### <a id='example-registry-images'></a> Example CustomStack from registry images

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: build-ca-certs
data:
  cert-1: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
  cert-2: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: run-ca-certs
data:
  cert-3: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
---
apiVersion: stacks.stacks-operator.tanzu.vmware.com/v1alpha1
kind: CustomStack
metadata:
  name: stack-sample
spec:
  source:
    registryImages:
      build:
        image: paketobuildpacks/build@sha256:ae88191cc5bfd0dcd2938954f20d5df5060a562af8e3d65a92a815612054537c
      run:
        image: paketobuildpacks/run@sha256:48f67dcb3f2b27403de80193e34abd3172b3fbdfdd87e452721aba90ea68fc66
  destination:
    build:
      tag: my.registry.io/final-build-image
    run:
      tag: my.registry.io/final-run-image
    stack: # Optional
      name: stack-sample-cluster-stack
      kind: ClusterStack
  caCerts: # Optional
    buildRef: # Optional
      name: build-ca-certs
    runRef: # Optional
      name: run-ca-certs
  packages: # Optional
    - name: cowsay
    - name: cowsay-off
    - name: fortune
      phase: build
    - name: rolldice
      phase: run
  mixins: # Optional
    - name: set=build-utils
      phase: build
    - name: set=run-utils
      phase: run
    - name: set=shared-utils
  serviceAccountName: default
  user: # Optional
    userID: 1000
    groupID: 1000
```

### <a id='example-registry-images'></a> Example CustomStack from ClusterStack

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: build-ca-certs
data:
  cert-1: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
  cert-2: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: run-ca-certs
data:
  cert-3: |
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
---
apiVersion: stacks.stacks-operator.tanzu.vmware.com/v1alpha1
kind: CustomStack
metadata:
  name: stack-sample
spec:
  source:
    stack:
      name: stack-sample-cluster-stack
      kind: ClusterStack
  destination:
    build:
      tag: my.registry.io/final-build-image
    run:
      tag: my.registry.io/final-run-image
    stack: # Optional
      name: final-stack-sample-cluster-stack
      kind: ClusterStack
  caCerts: # Optional
    buildRef: # Optional
      name: build-ca-certs
    runRef: # Optional
      name: run-ca-certs
  packages: # Optional
    - name: cowsay
    - name: cowsay-off
    - name: fortune
      phase: build # Optional
    - name: rolldice
      phase: run # Optional
  mixins: # Optional
    - name: set=build-utils
      phase: build # Optional
    - name: set=run-utils
      phase: run # Optional
    - name: set=shared-utils
  serviceAccountName: default
  user: # Optional
    userID: 1000 # Optional
    groupID: 1000 # Optional
```

## <a id='debugging-customstacks'></a> Debugging CustomStacks

When a CustomStack is created, a pod is created in the same namespace which modifies the base image and pushes the resulting stack image to the registry. The pod is named `stack-pod-<customstack-name>-<number>`

Where:

* `customstack-name` is the name of your CustomStack.
* `number` is the revision of your CustomStack. This is incremented by one each time a new spec is applied.

The ten latest pods are kept around for debugging purposes. To debug a failing CustomStack, check the logs of the corresponding pod: `kubectl logs <pod-name> -c <create-build-image/create-run-image>`

Where:

* `pod-name` is the name of the pod.
* `create-build-image/create-run-image` is the container whose logs you want to see.
	* `create-build-image` for logs related to creating the build image.
	* `create-run-image` for logs related to create the run image.
