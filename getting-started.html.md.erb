---
title: Get Started with Tanzu Build Service
owner: Build Service Team
---

This topic tells you how to get started with a typical installation of 
Tanzu Build Service and create an Image.

This topic serves as a quick-start guide and might not include some configurations 
required for your specific environment. 
For more information about installation, see [Install Tanzu Build Service](installing.html).

## <a id='prerequisites'></a> Prerequisites

Before you install Build Service, you must:

* Have access to the Kubernetes cluster satisfying the [minimum required permissions](#install-rbac).

* Users must navigate to the following dependencies pages in Tanzu Network and accept all EULAs highlighted in yellow.

	1. [Tanzu Build Service Dependencies](https://network.tanzu.vmware.com/products/tbs-dependencies/)
	1. [Buildpacks for VMware Tanzu](https://network.tanzu.vmware.com/products/tanzu-buildpacks-suite)
	1. [Stacks for VMware Tanzu](https://network.tanzu.vmware.com/products/tanzu-stacks-suite)

* Ensure your Kubernetes cluster is configured with default `StorageClass`.
Tanzu Build Service defaults to using 2G of cache if a default `StorageClass` is defined.
Build Service utilizes `PersistentVolumeClaims` to cache build artifacts, which reduces the time of subsequent builds.

    For more information, see [Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) in the Kubernetes documentation. And for information on defining a default StorageClass, see [Changing the default StorageClass](https://kubernetes.io/docs/tasks/administer-cluster/change-default-storage-class/)

* Download three [Carvel](https://carvel.dev/) CLIs for your operating system. These tools facilitate the installation of Tanzu Build Service on your cluster. They can be found on their respective Tanzu Network pages:
  - [kapp](https://network.tanzu.vmware.com/products/kapp/) is a deployment tool that allows users to manage Kubernetes resources in bulk.
  - [ytt](https://network.tanzu.vmware.com/products/ytt/) is a templating tool that understands YAML structure. Version 0.35.0 or higher is required.
  - [kbld](https://network.tanzu.vmware.com/products/kbld/) is needed to map relocated images to k8s config.
  - [imgpkg](https://network.tanzu.vmware.com/products/imgpkg/) is tool that relocates container images and pulls the release configuration files. Version 0.12.0 or higher is required.

* Find the latest Tanzu Build Service version by checking the [Tanzu Build Service](https://network.tanzu.vmware.com/products/build-service/) page on Tanzu Network. Just knowing the version is sufficient.

* Download the `kp` CLI for your operating system from the [Tanzu Build Service](https://network.tanzu.vmware.com/products/build-service/) page on Tanzu Network. The `kp` CLI help text is published [here](https://github.com/vmware-tanzu/kpack-cli/blob/v0.4.0/docs/kp.md).
	* These docs assume kp cli v0.5.* from TBS release v1.5.*. If a feature is not working, you may need to upgrade your cli.

* Download either the [`docker` CLI](https://docs.docker.com/get-docker/) or
[`crane` CLI](https://github.com/google/go-containerregistry/tree/main/cmd/crane)
for authentication with registries.

## <a id='Assumptions'></a> Assumptions

For this example setup, we make the following assumptions:

* You are installing TBS 1.5.1 (This is the latest version at the time of writing. Go to the [Tanzu Build Service](https://network.tanzu.vmware.com/products/build-service/) page to find the most up-to-date version).
* You are using a registry named `my.registry.io` with credentials
  * Username: `my-user`
  * Password: `my-password`
* Your registry uses a self-signed CA certificate and you have access to the cert in a file `/tmp/ca.crt`
  * The nodes on your cluster must also be configured to trust this CA certificate so they can pull in images. Configuration for this depends on the cluster provider
* You are using an "online" environment that has access to the internet

## <a id='installation'></a> Installation

### <a id='relocate-images'></a> Relocate Images to a Registry

This procedure relocates images from the Tanzu Network registry to your registry.

1. Log in to your image registry:

    - If using the `docker` CLI, run:

        ```console
        docker login my.registry.io --tlscacert /tmp/ca.crt
        ```

    - If uisng the `crane` CLI, run:

        ```console
        crane auth login my.registry.io --tlscacert /tmp/ca.crt
        ```

2. Log in to the Tanzu Network registry with your Tanzu Network credentials:

    - If using the `docker` CLI, run:

        ```console
        docker login registry.tanzu.vmware.com
        ```
    - If using the `crane` CLI, run:

        ```console
        crane auth login registry.tanzu.vmware.com
        ```

3. Relocate the images with the [Carvel](https://carvel.dev/) tool `imgpkg` by running:

    ```console
    imgpkg copy -b "registry.tanzu.vmware.com/build-service/bundle:1.5.1" --to-repo my.registry.io/some-repo/tbs --registry-ca-cert-path /tmp/ca.crt
    ```

4. Pull the Tanzu Build Service bundle locally using `imgpkg`:

    ```console
    imgpkg pull -b "my.registry.io/tbs:1.5.1" -o /tmp/bundle
    ```

### <a id='install'></a> Install Tanzu Build Service

Use the [Carvel](https://carvel.dev/) tools `kapp`, `ytt`, and `kbld` to install Build Service and define the required Build Service parameters by running:

```console
ytt -f /tmp/bundle/config/ \
  -f /tmp/ca.crt \
  -v kp_default_repository='my.registry.io/tbs' \
  -v kp_default_repository_username='my-user' \
  -v kp_default_repository_password='my-password' \
  --data-value-yaml pull_from_kp_default_repo=true \
  -v tanzunet_username='tanzunet-username' \
  -v tanzunet_password='tanzunet-password' \
  -v descriptor_name='lite' \
  --data-value-yaml enable_automatic_dependency_updates=true \
  | kbld -f /tmp/bundle/.imgpkg/images.yml -f- \
  | kapp deploy -a tanzu-build-service -f- -y
```

## <a id='verify-installation'></a> Verify Installation

To verify your Build Service installation:

List the cluster builders available in your installation:

```console
kp clusterbuilder list
```

You should see an output that looks as follows:

```
NAME       READY    STACK                          IMAGE
base       true     io.buildpacks.stacks.bionic    <image@sha256:digest>
default    true     io.buildpacks.stacks.bionic    <image@sha256:digest>
full       true     io.buildpacks.stacks.bionic    <image@sha256:digest>
tiny       true     io.paketo.stacks.tiny          <image@sha256:digest>
```

## <a id='create-image'></a> Create an Image

You can now create a Tanzu Build Service Image to start building you app and keep it patched with the latest Stack and Buildpack Dependencies.

We assume you are using the `default` namespace, use `-n` when using `kp` to set a specific namespace.

1. Create a Kubernetes Secret that allows your Builds to push to the desired registry with the `kp` cli:

    ```console
    kp secret create my-registry-creds --registry my.registry.io --registry-user my-user
    ```

    You are prompted for your password (`my-password`).

2. Create the Tanzu Build Service Image:

    We use a [sample java-maven app](https://github.com/buildpacks/samples/tree/098946cf3d9ce2d6b42d6b33a12b0799b288f873/apps/java-maven):

    ```console
    kp image create my-image --tag my.registry.io/tbs/test-app --git https://github.com/buildpacks/samples --sub-path ./apps/java-maven --wait
    ```
